<?php

class OrderController extends Controller
{
    //Aqui é onde vai ficar toda a logica de pedido.
    
    

    public function update(Request $request, $id)
    {
        try {
            // Encontrar o pedido
            $order = Order::find($id);
            if (!$order) {
                return response()->json(['message' => 'Pedido não encontrado.'], 404);
            }

            // Validar dados de entrada
            $validated = $request->validate([
                'products' => 'required|array|min:1',
                'products.*.id' => 'required|exists:products,id',
                'products.*.quantity' => 'required|integer|min:1',
            ]);

            $products = $validated['products'];
            $totalPrice = 0;

            // Obter todos os produtos de uma vez, para evitar múltiplas consultas
            $productIds = array_column($products, 'id');
            $productDetails = Product::whereIn('id', $productIds)->get()->keyBy('id');

            // Validar estoque e calcular o preço total
            foreach ($products as $product) {
                $productDetail = $productDetails->get($product['id']);

                if (!$productDetail) {
                    return response()->json([
                        'message' => 'Produto não encontrado com ID: ' . $product['id'],
                    ], 400);
                }

                // Verificar se o estoque é suficiente
                if ($productDetail->stock < $product['quantity']) {
                    return response()->json([
                        'message' => 'Estoque insuficiente para o produto ID: ' . $product['id'],
                        'available_stock' => $productDetail->stock,
                    ], 400);
                }

                // Calcular o preço total
                $totalPrice += $productDetail->price * $product['quantity'];
            }

            // Acessar a tabela de desconto e aplicar
            $discount = Discount::orderBy('price', 'desc')
                ->where('price', '<', $totalPrice)
                ->first();

            if ($discount) {
                $totalPrice -= ($totalPrice * $discount->discount) / 100;
            }

            // Atualizar a tabela intermediária `order_products`
            try {
                // Remover os produtos antigos
                $order->products()->detach();

                // Associar os novos produtos ao pedido
                foreach ($products as $product) {
                    $order->products()->attach($product['id'], [
                        'quantity' => $product['quantity'],
                        'unity_price' => $productDetails[$product['id']]->price,
                    ]);
                }
            } catch (\Exception $e) {
                return response()->json([
                    'message' => 'Erro ao atualizar os produtos do pedido: ' . $e->getMessage(),
                ], 500);
            }

            // Atualizar o pedido com o novo total
            try {
                $order->update([
                    'total_price' => round($totalPrice, 2),
                    'discount' => $discount ? $discount->discount : 0,
                ]);
            } catch (\Exception $e) {
                return response()->json([
                    'message' => 'Erro ao atualizar o pedido: ' . $e->getMessage(),
                ], 500);
            }

            return response()->json([
                'message' => 'Pedido atualizado com sucesso.',
                'order' => $order->load('products'),
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Erro ao processar a atualização do pedido: ' . $e->getMessage(),
            ], 500);
        }
    }

    
}
